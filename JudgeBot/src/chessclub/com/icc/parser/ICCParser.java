/* ICCParser.java */
/* Generated By:JavaCC: Do not edit this line. ICCParser.java */
package chessclub.com.icc.parser;

import chessclub.com.icc.jb.ifac.parserInterface;

@SuppressWarnings("all")
public class ICCParser implements ICCParserConstants {
   private parserInterface ifac = null;
//   public static void main( String[] args ) throws ParseException, TokenMgrError {
//      ICCParser parser = new ICCParser( System.in );
//      try
//      {
//      	parser.Start(null);
//      } catch(Exception e) {
//      	e.printStackTrace();
//      }
//  }
  static private boolean bothint(Object left, Object right)
  {
        if(left instanceof String || right instanceof String) return false;
        return true;
  }

  final public boolean booleanRule(parserInterface ifac) throws ParseException, Exception {boolean b;
                this.ifac = ifac;
    b = logicexpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 0:{
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return b;}
    throw new Error("Missing return statement in function");
  }

  final public int intRule(parserInterface ifac) throws ParseException, Exception {Object o;
                this.ifac = ifac;
    o = MathExpression(true);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 0:{
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
{if ("" != null) return (Integer)o;}
    throw new Error("Missing return statement in function");
  }

  final public boolean logicexpression() throws ParseException, Exception {boolean b;
                boolean f;
    b = sublogicexpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(AND);
      f = sublogicexpression();
b=(b&f);
    }
{if ("" != null) return b;}
    throw new Error("Missing return statement in function");
  }

  final public boolean sublogicexpression() throws ParseException, Exception {boolean b;
                boolean f;
    b = basic();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      f = basic();
b=(b|f);
    }
{if ("" != null) return b;}
    throw new Error("Missing return statement in function");
  }

  final public boolean basic() throws ParseException, Exception {boolean n = false;
                boolean b;
                Object left;
                Object right;
    if (jj_2_1(3)) {
      left = MathExpression(false);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GE:{
        jj_consume_token(GE);
        right = MathExpression(false);
b=(bothint(left,right)?(Integer)left>=(Integer)right:left.toString().compareToIgnoreCase(right.toString())>=0);
        break;
        }
      case LE:{
        jj_consume_token(LE);
        right = MathExpression(false);
b=(bothint(left,right)?(Integer)left<=(Integer)right:left.toString().compareToIgnoreCase(right.toString())<=0);
        break;
        }
      case EQ:{
        jj_consume_token(EQ);
        right = MathExpression(false);
b=(bothint(left,right)?(Integer)left==(Integer)right:left.toString().compareToIgnoreCase(right.toString())==0);
        break;
        }
      case NE:{
        jj_consume_token(NE);
        right = MathExpression(false);
b=(bothint(left,right)?(Integer)left!=(Integer)right:left.toString().compareToIgnoreCase(right.toString())!=0);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        right = MathExpression(false);
b=(bothint(left,right)?(Integer)left>(Integer)right:left.toString().compareToIgnoreCase(right.toString())>0);
        break;
        }
      case LT:{
        jj_consume_token(LT);
        right = MathExpression(false);
b=(bothint(left,right)?(Integer)left<(Integer)right:left.toString().compareToIgnoreCase(right.toString())<0);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return (n?!b:b);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case OPAREN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
n=true;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(OPAREN);
        b = logicexpression();
        jj_consume_token(CPAREN);
{if ("" != null) return (n?!b:b);}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Object MathExpression(boolean mustBeInteger) throws ParseException, Exception {Object value;
                Object i;
    value = MathTerm(mustBeInteger);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        i = MathTerm(true);
if(!(value instanceof Integer)) {if (true) throw new Exception("Trying to add an integer to a string");}
value = (Integer)value+(Integer)i;
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        i = MathTerm(true);
if(!(value instanceof Integer)) {if (true) throw new Exception("Trying to subtract an integer from a string");}
value = (Integer)value-(Integer)i;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public Object MathTerm(boolean mustBeInteger) throws ParseException, Exception {Object value;
                Object i;
    value = MathPrimary(mustBeInteger);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:{
        jj_consume_token(MULT);
        i = MathPrimary(true);
if(!(value instanceof Integer)) {if (true) throw new Exception("Trying to multiply a string with an integer");}
value = (Integer)i * (Integer)value;
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        i = MathPrimary(true);
if(!(value instanceof Integer)) {if (true) throw new Exception("Trying to divide a string with an integer");}
value = (Integer)value/(Integer)i;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public Object MathPrimary(boolean mustBeInteger) throws ParseException, Exception {Object value;
                Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      value = getNumber();
{if ("" != null) return value;}
      break;
      }
    case STRLIT:{
      t = jj_consume_token(STRLIT);
value = t.image.substring(1,t.image.length()-1);
{if ("" != null) return value;}
      break;
      }
    case ID:{
      value = getID(mustBeInteger);
{if ("" != null) return value;}
      break;
      }
    case OPAREN:{
      jj_consume_token(OPAREN);
      value = MathExpression(mustBeInteger);
      jj_consume_token(CPAREN);
{if ("" != null) return value;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int getNumber() throws ParseException {Token t;
    t = jj_consume_token(NUMBER);
{if ("" != null) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Object getID(boolean mustBeInteger) throws ParseException, Exception {Token t;
    t = jj_consume_token(ID);
if(mustBeInteger)
                                {if ("" != null) return ifac.getIVariable(t.image);}
                        else
                                {if ("" != null) return ifac.getVariable(t.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_5()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(OPAREN)) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(CPAREN)) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(STRLIT)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ICCParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1,0x1,0x8000,0x10000,0x3f00,0x4000,0x24000,0x600000,0x600000,0x180000,0x180000,0x200e0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ICCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ICCParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ICCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ICCParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ICCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ICCParser(ICCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ICCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
