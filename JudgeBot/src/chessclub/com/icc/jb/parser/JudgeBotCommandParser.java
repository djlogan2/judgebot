/* JudgeBotCommandParser.java */
/* Generated By:JavaCC: Do not edit this line. JudgeBotCommandParser.java */
package chessclub.com.icc.jb.parser;

import org.apache.log4j.Logger;

import chessclub.com.icc.l2.PersonalTell;
import chessclub.com.icc.jb.ifac.JudgeBotCommandInterface;

@SuppressWarnings("all")
public class JudgeBotCommandParser implements JudgeBotCommandParserConstants {
        private PersonalTell p;
        private boolean isHelper = false;
        private JudgeBotCommandInterface ifac;
    private static final Logger log = Logger.getLogger(JudgeBotCommandParser.class);

  final public void parse(PersonalTell p, boolean isHelper, JudgeBotCommandInterface ifac) throws ParseException, Exception {
    trace_call("parse");
    try {this.p = p;
                this.ifac = ifac;
                this.isHelper = isHelper;
                Token t1 = null;
                Token t2 = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HELP:{
        jj_consume_token(HELP);
        jj_consume_token(0);
ifac.help(p); {if ("" != null) return;}
        break;
        }
      case WIN:{
        jj_consume_token(WIN);
        jj_consume_token(0);
ifac.win(p, false); {if ("" != null) return;}
        break;
        }
      case NOWIN:{
        jj_consume_token(NOWIN);
        jj_consume_token(0);
ifac.win(p, true); {if ("" != null) return;}
        break;
        }
      case INFO:{
        jj_consume_token(INFO);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          t1 = jj_consume_token(ID);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        jj_consume_token(0);
ifac.info(p, (t1 == null?null:t1.image)); {if ("" != null) return;}
        break;
        }
      case LOSE:{
        jj_consume_token(LOSE);
        t1 = jj_consume_token(ID);
        jj_consume_token(0);
ifac.lose(p, t1.image, false); {if ("" != null) return;}
        break;
        }
      case NOLOSE:{
        jj_consume_token(NOLOSE);
        t1 = jj_consume_token(ID);
        jj_consume_token(0);
ifac.lose(p, t1.image, true); {if ("" != null) return;}
        break;
        }
      case STATUS:{
        jj_consume_token(STATUS);
        jj_consume_token(0);
if(p.titles().isOnDutyAdministrator() || isHelper) {
                        ifac.status(p, isHelper);
                        {if ("" != null) return;}
                };
                {if (true) throw new Exception("not.an.admin");}
        break;
        }
      case LASTTELLS:{
        jj_consume_token(LASTTELLS);
        jj_consume_token(0);
if(p.titles().isOnDutyAdministrator() || isHelper) {
                        ifac.lasttells(p, isHelper);
                        {if ("" != null) return;}
                };
                {if (true) throw new Exception("not.an.admin");}
        break;
        }
      case RESETMSG:{
        jj_consume_token(RESETMSG);
        jj_consume_token(0);
if(p.titles().isOnDutyAdministrator() || isHelper) {
                        ifac.reset(p);
                        {if ("" != null) return;}
                };
                {if (true) throw new Exception("not.an.admin");}
        break;
        }
      case KILLGAME:{
        jj_consume_token(KILLGAME);
        jj_consume_token(0);
if(p.titles().isOnDutyAdministrator() || isHelper) {
                        ifac.killgame(p, isHelper);
                        {if ("" != null) return;}
                };
                {if (true) throw new Exception("not.an.admin");}
        break;
        }
      case SUMMARY:{
        jj_consume_token(SUMMARY);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          t1 = jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ID:{
            t2 = jj_consume_token(ID);
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(0);
if(p.titles().isOnDutyAdministrator() || isHelper ) {
                        ifac.summary(p, isHelper, t1 != null ? t1.image : null, t2 != null ? t2.image : null);
                        {if ("" != null) return;}
                }
                {if (true) throw new Exception("not.an.admin");}
        break;
        }
      case RUNTIME:{
        jj_consume_token(RUNTIME);
        jj_consume_token(0);
if(!p.titles().isOnDutyAdministrator())
                        {if (true) throw new Exception("not.an.admin");}
                ifac.runtime(p); {if ("" != null) return;}
        break;
        }
      case MEMORY:{
        jj_consume_token(MEMORY);
        jj_consume_token(0);
if(!p.titles().isOnDutyAdministrator())
                        {if (true) throw new Exception("not.an.admin");}
                ifac.memory(p); {if ("" != null) return;}
        break;
        }
      case OS:{
        jj_consume_token(OS);
        jj_consume_token(0);
if(!p.titles().isOnDutyAdministrator())
                        {if (true) throw new Exception("not.an.admin");}
                ifac.os(p); {if ("" != null) return;}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("parse");
    }
  }

  /** Generated Token Manager. */
  public JudgeBotCommandParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800000,0x800000,0x800000,0x7ffe00,};
   }

  /** Constructor with InputStream. */
  public JudgeBotCommandParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JudgeBotCommandParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JudgeBotCommandParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JudgeBotCommandParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JudgeBotCommandParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JudgeBotCommandParser(JudgeBotCommandParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JudgeBotCommandParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
